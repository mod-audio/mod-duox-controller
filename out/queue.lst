   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"queue.c"
  12              		.text
  13              		.align	1
  14              		.syntax unified
  15              		.thumb
  16              		.thumb_func
  17              		.fpu softvfp
  19              	prvCopyDataToQueue:
  20              		@ args = 0, pretend = 0, frame = 0
  21              		@ frame_needed = 0, uses_anonymous_args = 0
  22 0000 38B5     		push	{r3, r4, r5, lr}
  23 0002 0446     		mov	r4, r0
  24 0004 1546     		mov	r5, r2
  25 0006 026C     		ldr	r2, [r0, #64]
  26 0008 EAB1     		cbz	r2, .L2
  27 000a 65B9     		cbnz	r5, .L3
  28 000c 8068     		ldr	r0, [r0, #8]
  29 000e FFF7FEFF 		bl	memcpy
  30 0012 A368     		ldr	r3, [r4, #8]
  31 0014 226C     		ldr	r2, [r4, #64]
  32 0016 1344     		add	r3, r3, r2
  33 0018 A360     		str	r3, [r4, #8]
  34 001a 6268     		ldr	r2, [r4, #4]
  35 001c 9342     		cmp	r3, r2
  36 001e 12D3     		bcc	.L2
  37 0020 2368     		ldr	r3, [r4]
  38 0022 A360     		str	r3, [r4, #8]
  39 0024 0FE0     		b	.L2
  40              	.L3:
  41 0026 C068     		ldr	r0, [r0, #12]
  42 0028 FFF7FEFF 		bl	memcpy
  43 002c 226C     		ldr	r2, [r4, #64]
  44 002e 5242     		negs	r2, r2
  45 0030 E368     		ldr	r3, [r4, #12]
  46 0032 1344     		add	r3, r3, r2
  47 0034 E360     		str	r3, [r4, #12]
  48 0036 2168     		ldr	r1, [r4]
  49 0038 8B42     		cmp	r3, r1
  50 003a 02D2     		bcs	.L4
  51 003c 6368     		ldr	r3, [r4, #4]
  52 003e 1A44     		add	r2, r2, r3
  53 0040 E260     		str	r2, [r4, #12]
  54              	.L4:
  55 0042 022D     		cmp	r5, #2
  56 0044 04D0     		beq	.L6
  57              	.L2:
  58 0046 A36B     		ldr	r3, [r4, #56]
  59 0048 0133     		adds	r3, r3, #1
  60 004a A363     		str	r3, [r4, #56]
  61 004c 0020     		movs	r0, #0
  62 004e 38BD     		pop	{r3, r4, r5, pc}
  63              	.L6:
  64 0050 A36B     		ldr	r3, [r4, #56]
  65 0052 002B     		cmp	r3, #0
  66 0054 F7D0     		beq	.L2
  67 0056 A36B     		ldr	r3, [r4, #56]
  68 0058 013B     		subs	r3, r3, #1
  69 005a A363     		str	r3, [r4, #56]
  70 005c F3E7     		b	.L2
  72              		.align	1
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu softvfp
  78              	prvCopyDataFromQueue:
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81 005e 026C     		ldr	r2, [r0, #64]
  82 0060 72B1     		cbz	r2, .L11
  83 0062 10B5     		push	{r4, lr}
  84 0064 C368     		ldr	r3, [r0, #12]
  85 0066 1344     		add	r3, r3, r2
  86 0068 C360     		str	r3, [r0, #12]
  87 006a 4468     		ldr	r4, [r0, #4]
  88 006c A342     		cmp	r3, r4
  89 006e 24BF     		itt	cs
  90 0070 0368     		ldrcs	r3, [r0]
  91 0072 C360     		strcs	r3, [r0, #12]
  92 0074 0C46     		mov	r4, r1
  93 0076 C168     		ldr	r1, [r0, #12]
  94 0078 2046     		mov	r0, r4
  95 007a FFF7FEFF 		bl	memcpy
  96 007e 10BD     		pop	{r4, pc}
  97              	.L11:
  98 0080 7047     		bx	lr
 100              		.align	1
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu softvfp
 106              	prvUnlockQueue:
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109 0082 38B5     		push	{r3, r4, r5, lr}
 110 0084 0446     		mov	r4, r0
 111 0086 FFF7FEFF 		bl	vPortEnterCritical
 112 008a A36C     		ldr	r3, [r4, #72]
 113 008c 002B     		cmp	r3, #0
 114 008e 14DD     		ble	.L15
 115 0090 636A     		ldr	r3, [r4, #36]
 116 0092 93B1     		cbz	r3, .L15
 117 0094 04F12405 		add	r5, r4, #36
 118 0098 09E0     		b	.L16
 119              	.L26:
 120 009a FFF7FEFF 		bl	vTaskMissedYield
 121              	.L17:
 122 009e A36C     		ldr	r3, [r4, #72]
 123 00a0 013B     		subs	r3, r3, #1
 124 00a2 A364     		str	r3, [r4, #72]
 125 00a4 A36C     		ldr	r3, [r4, #72]
 126 00a6 002B     		cmp	r3, #0
 127 00a8 07DD     		ble	.L15
 128 00aa 636A     		ldr	r3, [r4, #36]
 129 00ac 2BB1     		cbz	r3, .L15
 130              	.L16:
 131 00ae 2846     		mov	r0, r5
 132 00b0 FFF7FEFF 		bl	xTaskRemoveFromEventList
 133 00b4 0028     		cmp	r0, #0
 134 00b6 F2D0     		beq	.L17
 135 00b8 EFE7     		b	.L26
 136              	.L15:
 137 00ba 4FF0FF33 		mov	r3, #-1
 138 00be A364     		str	r3, [r4, #72]
 139 00c0 FFF7FEFF 		bl	vPortExitCritical
 140 00c4 FFF7FEFF 		bl	vPortEnterCritical
 141 00c8 636C     		ldr	r3, [r4, #68]
 142 00ca 002B     		cmp	r3, #0
 143 00cc 14DD     		ble	.L19
 144 00ce 2369     		ldr	r3, [r4, #16]
 145 00d0 93B1     		cbz	r3, .L19
 146 00d2 04F11005 		add	r5, r4, #16
 147 00d6 09E0     		b	.L20
 148              	.L27:
 149 00d8 FFF7FEFF 		bl	vTaskMissedYield
 150              	.L21:
 151 00dc 636C     		ldr	r3, [r4, #68]
 152 00de 013B     		subs	r3, r3, #1
 153 00e0 6364     		str	r3, [r4, #68]
 154 00e2 636C     		ldr	r3, [r4, #68]
 155 00e4 002B     		cmp	r3, #0
 156 00e6 07DD     		ble	.L19
 157 00e8 2369     		ldr	r3, [r4, #16]
 158 00ea 2BB1     		cbz	r3, .L19
 159              	.L20:
 160 00ec 2846     		mov	r0, r5
 161 00ee FFF7FEFF 		bl	xTaskRemoveFromEventList
 162 00f2 0028     		cmp	r0, #0
 163 00f4 F2D0     		beq	.L21
 164 00f6 EFE7     		b	.L27
 165              	.L19:
 166 00f8 4FF0FF33 		mov	r3, #-1
 167 00fc 6364     		str	r3, [r4, #68]
 168 00fe FFF7FEFF 		bl	vPortExitCritical
 169 0102 38BD     		pop	{r3, r4, r5, pc}
 171              		.align	1
 172              		.global	xQueueGenericReset
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu softvfp
 178              	xQueueGenericReset:
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181 0104 38B5     		push	{r3, r4, r5, lr}
 182 0106 0446     		mov	r4, r0
 183 0108 0D46     		mov	r5, r1
 184 010a FFF7FEFF 		bl	vPortEnterCritical
 185 010e 2268     		ldr	r2, [r4]
 186 0110 216C     		ldr	r1, [r4, #64]
 187 0112 E36B     		ldr	r3, [r4, #60]
 188 0114 03FB01F3 		mul	r3, r3, r1
 189 0118 D018     		adds	r0, r2, r3
 190 011a 6060     		str	r0, [r4, #4]
 191 011c 0020     		movs	r0, #0
 192 011e A063     		str	r0, [r4, #56]
 193 0120 A260     		str	r2, [r4, #8]
 194 0122 5B1A     		subs	r3, r3, r1
 195 0124 1344     		add	r3, r3, r2
 196 0126 E360     		str	r3, [r4, #12]
 197 0128 4FF0FF33 		mov	r3, #-1
 198 012c 6364     		str	r3, [r4, #68]
 199 012e A364     		str	r3, [r4, #72]
 200 0130 75B9     		cbnz	r5, .L29
 201 0132 2369     		ldr	r3, [r4, #16]
 202 0134 1BB9     		cbnz	r3, .L32
 203              	.L30:
 204 0136 FFF7FEFF 		bl	vPortExitCritical
 205 013a 0120     		movs	r0, #1
 206 013c 38BD     		pop	{r3, r4, r5, pc}
 207              	.L32:
 208 013e 04F11000 		add	r0, r4, #16
 209 0142 FFF7FEFF 		bl	xTaskRemoveFromEventList
 210 0146 0128     		cmp	r0, #1
 211 0148 F5D1     		bne	.L30
 212 014a FFF7FEFF 		bl	vPortYield
 213 014e F2E7     		b	.L30
 214              	.L29:
 215 0150 04F11000 		add	r0, r4, #16
 216 0154 FFF7FEFF 		bl	vListInitialise
 217 0158 04F12400 		add	r0, r4, #36
 218 015c FFF7FEFF 		bl	vListInitialise
 219 0160 E9E7     		b	.L30
 221              		.align	1
 222              		.global	xQueueGenericCreate
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 226              		.fpu softvfp
 228              	xQueueGenericCreate:
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231 0162 70B5     		push	{r4, r5, r6, lr}
 232 0164 0546     		mov	r5, r0
 233 0166 0E46     		mov	r6, r1
 234 0168 61B1     		cbz	r1, .L34
 235 016a 00FB01F0 		mul	r0, r0, r1
 236 016e 4D30     		adds	r0, r0, #77
 237 0170 FFF7FEFF 		bl	pvPortMalloc
 238 0174 0446     		mov	r4, r0
 239 0176 18B1     		cbz	r0, .L40
 240 0178 00F14C03 		add	r3, r0, #76
 241 017c 0360     		str	r3, [r0]
 242 017e 07E0     		b	.L37
 243              	.L40:
 244 0180 0024     		movs	r4, #0
 245 0182 0BE0     		b	.L33
 246              	.L34:
 247 0184 4C20     		movs	r0, #76
 248 0186 FFF7FEFF 		bl	pvPortMalloc
 249 018a 0446     		mov	r4, r0
 250 018c 40B1     		cbz	r0, .L41
 251 018e 2460     		str	r4, [r4]
 252              	.L37:
 253 0190 E563     		str	r5, [r4, #60]
 254 0192 2664     		str	r6, [r4, #64]
 255 0194 0121     		movs	r1, #1
 256 0196 2046     		mov	r0, r4
 257 0198 FFF7FEFF 		bl	xQueueGenericReset
 258              	.L33:
 259 019c 2046     		mov	r0, r4
 260 019e 70BD     		pop	{r4, r5, r6, pc}
 261              	.L41:
 262 01a0 0024     		movs	r4, #0
 263 01a2 FBE7     		b	.L33
 265              		.align	1
 266              		.global	xQueueCreateCountingSemaphore
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 270              		.fpu softvfp
 272              	xQueueCreateCountingSemaphore:
 273              		@ args = 0, pretend = 0, frame = 0
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275 01a4 10B5     		push	{r4, lr}
 276 01a6 0C46     		mov	r4, r1
 277 01a8 0222     		movs	r2, #2
 278 01aa 0021     		movs	r1, #0
 279 01ac FFF7FEFF 		bl	xQueueGenericCreate
 280 01b0 0346     		mov	r3, r0
 281 01b2 00B1     		cbz	r0, .L42
 282 01b4 8463     		str	r4, [r0, #56]
 283              	.L42:
 284 01b6 1846     		mov	r0, r3
 285 01b8 10BD     		pop	{r4, pc}
 287              		.align	1
 288              		.global	xQueueGenericSend
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu softvfp
 294              	xQueueGenericSend:
 295              		@ args = 0, pretend = 0, frame = 16
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297 01ba 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 298 01be 85B0     		sub	sp, sp, #20
 299 01c0 0446     		mov	r4, r0
 300 01c2 8846     		mov	r8, r1
 301 01c4 0192     		str	r2, [sp, #4]
 302 01c6 1E46     		mov	r6, r3
 303 01c8 0025     		movs	r5, #0
 304 01ca 2F46     		mov	r7, r5
 305 01cc 27E0     		b	.L46
 306              	.L47:
 307 01ce 3246     		mov	r2, r6
 308 01d0 4146     		mov	r1, r8
 309 01d2 2046     		mov	r0, r4
 310 01d4 FFF714FF 		bl	prvCopyDataToQueue
 311 01d8 636A     		ldr	r3, [r4, #36]
 312 01da 33B9     		cbnz	r3, .L60
 313 01dc 70B9     		cbnz	r0, .L61
 314              	.L50:
 315 01de FFF7FEFF 		bl	vPortExitCritical
 316 01e2 0120     		movs	r0, #1
 317              	.L45:
 318 01e4 05B0     		add	sp, sp, #20
 319              		@ sp needed
 320 01e6 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 321              	.L60:
 322 01ea 04F12400 		add	r0, r4, #36
 323 01ee FFF7FEFF 		bl	xTaskRemoveFromEventList
 324 01f2 0128     		cmp	r0, #1
 325 01f4 F3D1     		bne	.L50
 326 01f6 FFF7FEFF 		bl	vPortYield
 327 01fa F0E7     		b	.L50
 328              	.L61:
 329 01fc FFF7FEFF 		bl	vPortYield
 330 0200 EDE7     		b	.L50
 331              	.L62:
 332 0202 FFF7FEFF 		bl	vPortExitCritical
 333 0206 0020     		movs	r0, #0
 334 0208 ECE7     		b	.L45
 335              	.L63:
 336 020a 02A8     		add	r0, sp, #8
 337 020c FFF7FEFF 		bl	vTaskSetTimeOutState
 338 0210 12E0     		b	.L53
 339              	.L57:
 340 0212 2046     		mov	r0, r4
 341 0214 FFF735FF 		bl	prvUnlockQueue
 342 0218 FFF7FEFF 		bl	xTaskResumeAll
 343              	.L58:
 344 021c 0125     		movs	r5, #1
 345              	.L46:
 346 021e FFF7FEFF 		bl	vPortEnterCritical
 347 0222 A26B     		ldr	r2, [r4, #56]
 348 0224 E36B     		ldr	r3, [r4, #60]
 349 0226 9A42     		cmp	r2, r3
 350 0228 D1D3     		bcc	.L47
 351 022a 022E     		cmp	r6, #2
 352 022c CFD0     		beq	.L47
 353 022e 019B     		ldr	r3, [sp, #4]
 354 0230 002B     		cmp	r3, #0
 355 0232 E6D0     		beq	.L62
 356 0234 002D     		cmp	r5, #0
 357 0236 E8D0     		beq	.L63
 358              	.L53:
 359 0238 FFF7FEFF 		bl	vPortExitCritical
 360 023c FFF7FEFF 		bl	vTaskSuspendAll
 361 0240 FFF7FEFF 		bl	vPortEnterCritical
 362 0244 636C     		ldr	r3, [r4, #68]
 363 0246 B3F1FF3F 		cmp	r3, #-1
 364 024a 08BF     		it	eq
 365 024c 6764     		streq	r7, [r4, #68]
 366 024e A36C     		ldr	r3, [r4, #72]
 367 0250 B3F1FF3F 		cmp	r3, #-1
 368 0254 08BF     		it	eq
 369 0256 A764     		streq	r7, [r4, #72]
 370 0258 FFF7FEFF 		bl	vPortExitCritical
 371 025c 01A9     		add	r1, sp, #4
 372 025e 02A8     		add	r0, sp, #8
 373 0260 FFF7FEFF 		bl	xTaskCheckForTimeOut
 374 0264 B8B9     		cbnz	r0, .L56
 375 0266 FFF7FEFF 		bl	vPortEnterCritical
 376 026a D4F83890 		ldr	r9, [r4, #56]
 377 026e E56B     		ldr	r5, [r4, #60]
 378 0270 FFF7FEFF 		bl	vPortExitCritical
 379 0274 A945     		cmp	r9, r5
 380 0276 CCD1     		bne	.L57
 381 0278 0199     		ldr	r1, [sp, #4]
 382 027a 04F11000 		add	r0, r4, #16
 383 027e FFF7FEFF 		bl	vTaskPlaceOnEventList
 384 0282 2046     		mov	r0, r4
 385 0284 FFF7FDFE 		bl	prvUnlockQueue
 386 0288 FFF7FEFF 		bl	xTaskResumeAll
 387 028c 0028     		cmp	r0, #0
 388 028e C5D1     		bne	.L58
 389 0290 FFF7FEFF 		bl	vPortYield
 390 0294 C2E7     		b	.L58
 391              	.L56:
 392 0296 2046     		mov	r0, r4
 393 0298 FFF7F3FE 		bl	prvUnlockQueue
 394 029c FFF7FEFF 		bl	xTaskResumeAll
 395 02a0 0020     		movs	r0, #0
 396 02a2 9FE7     		b	.L45
 398              		.align	1
 399              		.global	xQueueGenericSendFromISR
 400              		.syntax unified
 401              		.thumb
 402              		.thumb_func
 403              		.fpu softvfp
 405              	xQueueGenericSendFromISR:
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408 02a4 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 409 02a8 0446     		mov	r4, r0
 410 02aa 0F46     		mov	r7, r1
 411 02ac 9046     		mov	r8, r2
 412 02ae 1D46     		mov	r5, r3
 413 02b0 FFF7FEFF 		bl	ulPortSetInterruptMask
 414 02b4 0646     		mov	r6, r0
 415 02b6 A26B     		ldr	r2, [r4, #56]
 416 02b8 E36B     		ldr	r3, [r4, #60]
 417 02ba 9A42     		cmp	r2, r3
 418 02bc 08D3     		bcc	.L65
 419 02be 022D     		cmp	r5, #2
 420 02c0 06D0     		beq	.L65
 421 02c2 0024     		movs	r4, #0
 422              	.L66:
 423 02c4 3046     		mov	r0, r6
 424 02c6 FFF7FEFF 		bl	vPortClearInterruptMask
 425 02ca 2046     		mov	r0, r4
 426 02cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 427              	.L65:
 428 02d0 2A46     		mov	r2, r5
 429 02d2 3946     		mov	r1, r7
 430 02d4 2046     		mov	r0, r4
 431 02d6 FFF793FE 		bl	prvCopyDataToQueue
 432 02da A36C     		ldr	r3, [r4, #72]
 433 02dc B3F1FF3F 		cmp	r3, #-1
 434 02e0 04D0     		beq	.L73
 435 02e2 A36C     		ldr	r3, [r4, #72]
 436 02e4 0133     		adds	r3, r3, #1
 437 02e6 A364     		str	r3, [r4, #72]
 438 02e8 0124     		movs	r4, #1
 439 02ea EBE7     		b	.L66
 440              	.L73:
 441 02ec 636A     		ldr	r3, [r4, #36]
 442 02ee 0BB9     		cbnz	r3, .L74
 443 02f0 0124     		movs	r4, #1
 444 02f2 E7E7     		b	.L66
 445              	.L74:
 446 02f4 04F12400 		add	r0, r4, #36
 447 02f8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 448 02fc 30B1     		cbz	r0, .L70
 449 02fe B8F1000F 		cmp	r8, #0
 450 0302 05D0     		beq	.L71
 451 0304 0124     		movs	r4, #1
 452 0306 C8F80040 		str	r4, [r8]
 453 030a DBE7     		b	.L66
 454              	.L70:
 455 030c 0124     		movs	r4, #1
 456 030e D9E7     		b	.L66
 457              	.L71:
 458 0310 0124     		movs	r4, #1
 459 0312 D7E7     		b	.L66
 461              		.align	1
 462              		.global	xQueueGiveFromISR
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu softvfp
 468              	xQueueGiveFromISR:
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471 0314 70B5     		push	{r4, r5, r6, lr}
 472 0316 0446     		mov	r4, r0
 473 0318 0E46     		mov	r6, r1
 474 031a FFF7FEFF 		bl	ulPortSetInterruptMask
 475 031e 0546     		mov	r5, r0
 476 0320 A26B     		ldr	r2, [r4, #56]
 477 0322 E36B     		ldr	r3, [r4, #60]
 478 0324 9A42     		cmp	r2, r3
 479 0326 18D2     		bcs	.L78
 480 0328 A36B     		ldr	r3, [r4, #56]
 481 032a 0133     		adds	r3, r3, #1
 482 032c A363     		str	r3, [r4, #56]
 483 032e A36C     		ldr	r3, [r4, #72]
 484 0330 B3F1FF3F 		cmp	r3, #-1
 485 0334 04D0     		beq	.L83
 486 0336 A36C     		ldr	r3, [r4, #72]
 487 0338 0133     		adds	r3, r3, #1
 488 033a A364     		str	r3, [r4, #72]
 489 033c 0124     		movs	r4, #1
 490 033e 0DE0     		b	.L76
 491              	.L83:
 492 0340 636A     		ldr	r3, [r4, #36]
 493 0342 0BB9     		cbnz	r3, .L84
 494 0344 0124     		movs	r4, #1
 495 0346 09E0     		b	.L76
 496              	.L84:
 497 0348 04F12400 		add	r0, r4, #36
 498 034c FFF7FEFF 		bl	xTaskRemoveFromEventList
 499 0350 48B1     		cbz	r0, .L80
 500 0352 56B1     		cbz	r6, .L81
 501 0354 0124     		movs	r4, #1
 502 0356 3460     		str	r4, [r6]
 503 0358 00E0     		b	.L76
 504              	.L78:
 505 035a 0024     		movs	r4, #0
 506              	.L76:
 507 035c 2846     		mov	r0, r5
 508 035e FFF7FEFF 		bl	vPortClearInterruptMask
 509 0362 2046     		mov	r0, r4
 510 0364 70BD     		pop	{r4, r5, r6, pc}
 511              	.L80:
 512 0366 0124     		movs	r4, #1
 513 0368 F8E7     		b	.L76
 514              	.L81:
 515 036a 0124     		movs	r4, #1
 516 036c F6E7     		b	.L76
 518              		.align	1
 519              		.global	xQueueGenericReceive
 520              		.syntax unified
 521              		.thumb
 522              		.thumb_func
 523              		.fpu softvfp
 525              	xQueueGenericReceive:
 526              		@ args = 0, pretend = 0, frame = 16
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528 036e 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 529 0372 84B0     		sub	sp, sp, #16
 530 0374 0446     		mov	r4, r0
 531 0376 8846     		mov	r8, r1
 532 0378 0192     		str	r2, [sp, #4]
 533 037a 1F46     		mov	r7, r3
 534 037c 0025     		movs	r5, #0
 535 037e 2E46     		mov	r6, r5
 536 0380 34E0     		b	.L86
 537              	.L100:
 538 0382 E568     		ldr	r5, [r4, #12]
 539 0384 4146     		mov	r1, r8
 540 0386 2046     		mov	r0, r4
 541 0388 FFF769FE 		bl	prvCopyDataFromQueue
 542 038c 9FB9     		cbnz	r7, .L88
 543 038e A36B     		ldr	r3, [r4, #56]
 544 0390 013B     		subs	r3, r3, #1
 545 0392 A363     		str	r3, [r4, #56]
 546 0394 2369     		ldr	r3, [r4, #16]
 547 0396 2BB9     		cbnz	r3, .L99
 548              	.L89:
 549 0398 FFF7FEFF 		bl	vPortExitCritical
 550 039c 0120     		movs	r0, #1
 551              	.L85:
 552 039e 04B0     		add	sp, sp, #16
 553              		@ sp needed
 554 03a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 555              	.L99:
 556 03a4 04F11000 		add	r0, r4, #16
 557 03a8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 558 03ac 0128     		cmp	r0, #1
 559 03ae F3D1     		bne	.L89
 560 03b0 FFF7FEFF 		bl	vPortYield
 561 03b4 F0E7     		b	.L89
 562              	.L88:
 563 03b6 E560     		str	r5, [r4, #12]
 564 03b8 636A     		ldr	r3, [r4, #36]
 565 03ba 002B     		cmp	r3, #0
 566 03bc ECD0     		beq	.L89
 567 03be 04F12400 		add	r0, r4, #36
 568 03c2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 569 03c6 0028     		cmp	r0, #0
 570 03c8 E6D0     		beq	.L89
 571 03ca FFF7FEFF 		bl	vPortYield
 572 03ce E3E7     		b	.L89
 573              	.L101:
 574 03d0 FFF7FEFF 		bl	vPortExitCritical
 575 03d4 0020     		movs	r0, #0
 576 03d6 E2E7     		b	.L85
 577              	.L102:
 578 03d8 02A8     		add	r0, sp, #8
 579 03da FFF7FEFF 		bl	vTaskSetTimeOutState
 580 03de 0FE0     		b	.L92
 581              	.L96:
 582 03e0 2046     		mov	r0, r4
 583 03e2 FFF74EFE 		bl	prvUnlockQueue
 584 03e6 FFF7FEFF 		bl	xTaskResumeAll
 585              	.L97:
 586 03ea 0125     		movs	r5, #1
 587              	.L86:
 588 03ec FFF7FEFF 		bl	vPortEnterCritical
 589 03f0 A36B     		ldr	r3, [r4, #56]
 590 03f2 002B     		cmp	r3, #0
 591 03f4 C5D1     		bne	.L100
 592 03f6 019B     		ldr	r3, [sp, #4]
 593 03f8 002B     		cmp	r3, #0
 594 03fa E9D0     		beq	.L101
 595 03fc 002D     		cmp	r5, #0
 596 03fe EBD0     		beq	.L102
 597              	.L92:
 598 0400 FFF7FEFF 		bl	vPortExitCritical
 599 0404 FFF7FEFF 		bl	vTaskSuspendAll
 600 0408 FFF7FEFF 		bl	vPortEnterCritical
 601 040c 636C     		ldr	r3, [r4, #68]
 602 040e B3F1FF3F 		cmp	r3, #-1
 603 0412 08BF     		it	eq
 604 0414 6664     		streq	r6, [r4, #68]
 605 0416 A36C     		ldr	r3, [r4, #72]
 606 0418 B3F1FF3F 		cmp	r3, #-1
 607 041c 08BF     		it	eq
 608 041e A664     		streq	r6, [r4, #72]
 609 0420 FFF7FEFF 		bl	vPortExitCritical
 610 0424 01A9     		add	r1, sp, #4
 611 0426 02A8     		add	r0, sp, #8
 612 0428 FFF7FEFF 		bl	xTaskCheckForTimeOut
 613 042c A8B9     		cbnz	r0, .L95
 614 042e FFF7FEFF 		bl	vPortEnterCritical
 615 0432 A56B     		ldr	r5, [r4, #56]
 616 0434 FFF7FEFF 		bl	vPortExitCritical
 617 0438 002D     		cmp	r5, #0
 618 043a D1D1     		bne	.L96
 619 043c 0199     		ldr	r1, [sp, #4]
 620 043e 04F12400 		add	r0, r4, #36
 621 0442 FFF7FEFF 		bl	vTaskPlaceOnEventList
 622 0446 2046     		mov	r0, r4
 623 0448 FFF71BFE 		bl	prvUnlockQueue
 624 044c FFF7FEFF 		bl	xTaskResumeAll
 625 0450 0028     		cmp	r0, #0
 626 0452 CAD1     		bne	.L97
 627 0454 FFF7FEFF 		bl	vPortYield
 628 0458 C7E7     		b	.L97
 629              	.L95:
 630 045a 2046     		mov	r0, r4
 631 045c FFF711FE 		bl	prvUnlockQueue
 632 0460 FFF7FEFF 		bl	xTaskResumeAll
 633 0464 0020     		movs	r0, #0
 634 0466 9AE7     		b	.L85
 636              		.align	1
 637              		.global	xQueueReceiveFromISR
 638              		.syntax unified
 639              		.thumb
 640              		.thumb_func
 641              		.fpu softvfp
 643              	xQueueReceiveFromISR:
 644              		@ args = 0, pretend = 0, frame = 0
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646 0468 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 647 046a 0446     		mov	r4, r0
 648 046c 0E46     		mov	r6, r1
 649 046e 1746     		mov	r7, r2
 650 0470 FFF7FEFF 		bl	ulPortSetInterruptMask
 651 0474 0546     		mov	r5, r0
 652 0476 A36B     		ldr	r3, [r4, #56]
 653 0478 2BB9     		cbnz	r3, .L111
 654 047a 0024     		movs	r4, #0
 655              	.L104:
 656 047c 2846     		mov	r0, r5
 657 047e FFF7FEFF 		bl	vPortClearInterruptMask
 658 0482 2046     		mov	r0, r4
 659 0484 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 660              	.L111:
 661 0486 3146     		mov	r1, r6
 662 0488 2046     		mov	r0, r4
 663 048a FFF7E8FD 		bl	prvCopyDataFromQueue
 664 048e A36B     		ldr	r3, [r4, #56]
 665 0490 013B     		subs	r3, r3, #1
 666 0492 A363     		str	r3, [r4, #56]
 667 0494 636C     		ldr	r3, [r4, #68]
 668 0496 B3F1FF3F 		cmp	r3, #-1
 669 049a 04D0     		beq	.L112
 670 049c 636C     		ldr	r3, [r4, #68]
 671 049e 0133     		adds	r3, r3, #1
 672 04a0 6364     		str	r3, [r4, #68]
 673 04a2 0124     		movs	r4, #1
 674 04a4 EAE7     		b	.L104
 675              	.L112:
 676 04a6 2369     		ldr	r3, [r4, #16]
 677 04a8 0BB9     		cbnz	r3, .L113
 678 04aa 0124     		movs	r4, #1
 679 04ac E6E7     		b	.L104
 680              	.L113:
 681 04ae 04F11000 		add	r0, r4, #16
 682 04b2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 683 04b6 18B1     		cbz	r0, .L108
 684 04b8 27B1     		cbz	r7, .L109
 685 04ba 0124     		movs	r4, #1
 686 04bc 3C60     		str	r4, [r7]
 687 04be DDE7     		b	.L104
 688              	.L108:
 689 04c0 0124     		movs	r4, #1
 690 04c2 DBE7     		b	.L104
 691              	.L109:
 692 04c4 0124     		movs	r4, #1
 693 04c6 D9E7     		b	.L104
 695              		.align	1
 696              		.global	xQueuePeekFromISR
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 700              		.fpu softvfp
 702              	xQueuePeekFromISR:
 703              		@ args = 0, pretend = 0, frame = 0
 704              		@ frame_needed = 0, uses_anonymous_args = 0
 705 04c8 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 706 04ca 0446     		mov	r4, r0
 707 04cc 0E46     		mov	r6, r1
 708 04ce FFF7FEFF 		bl	ulPortSetInterruptMask
 709 04d2 0546     		mov	r5, r0
 710 04d4 A36B     		ldr	r3, [r4, #56]
 711 04d6 2BB9     		cbnz	r3, .L118
 712 04d8 0024     		movs	r4, #0
 713              	.L115:
 714 04da 2846     		mov	r0, r5
 715 04dc FFF7FEFF 		bl	vPortClearInterruptMask
 716 04e0 2046     		mov	r0, r4
 717 04e2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 718              	.L118:
 719 04e4 E768     		ldr	r7, [r4, #12]
 720 04e6 3146     		mov	r1, r6
 721 04e8 2046     		mov	r0, r4
 722 04ea FFF7B8FD 		bl	prvCopyDataFromQueue
 723 04ee E760     		str	r7, [r4, #12]
 724 04f0 0124     		movs	r4, #1
 725 04f2 F2E7     		b	.L115
 727              		.align	1
 728              		.global	uxQueueMessagesWaiting
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 732              		.fpu softvfp
 734              	uxQueueMessagesWaiting:
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737 04f4 10B5     		push	{r4, lr}
 738 04f6 0446     		mov	r4, r0
 739 04f8 FFF7FEFF 		bl	vPortEnterCritical
 740 04fc A46B     		ldr	r4, [r4, #56]
 741 04fe FFF7FEFF 		bl	vPortExitCritical
 742 0502 2046     		mov	r0, r4
 743 0504 10BD     		pop	{r4, pc}
 745              		.align	1
 746              		.global	uxQueueSpacesAvailable
 747              		.syntax unified
 748              		.thumb
 749              		.thumb_func
 750              		.fpu softvfp
 752              	uxQueueSpacesAvailable:
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755 0506 38B5     		push	{r3, r4, r5, lr}
 756 0508 0546     		mov	r5, r0
 757 050a FFF7FEFF 		bl	vPortEnterCritical
 758 050e AB6B     		ldr	r3, [r5, #56]
 759 0510 EC6B     		ldr	r4, [r5, #60]
 760 0512 E41A     		subs	r4, r4, r3
 761 0514 FFF7FEFF 		bl	vPortExitCritical
 762 0518 2046     		mov	r0, r4
 763 051a 38BD     		pop	{r3, r4, r5, pc}
 765              		.align	1
 766              		.global	uxQueueMessagesWaitingFromISR
 767              		.syntax unified
 768              		.thumb
 769              		.thumb_func
 770              		.fpu softvfp
 772              	uxQueueMessagesWaitingFromISR:
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 0, uses_anonymous_args = 0
 775              		@ link register save eliminated.
 776 051c 806B     		ldr	r0, [r0, #56]
 777 051e 7047     		bx	lr
 779              		.align	1
 780              		.global	xQueueIsQueueEmptyFromISR
 781              		.syntax unified
 782              		.thumb
 783              		.thumb_func
 784              		.fpu softvfp
 786              	xQueueIsQueueEmptyFromISR:
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              		@ link register save eliminated.
 790 0520 806B     		ldr	r0, [r0, #56]
 791 0522 B0FA80F0 		clz	r0, r0
 792 0526 4009     		lsrs	r0, r0, #5
 793 0528 7047     		bx	lr
 795              		.align	1
 796              		.global	xQueueIsQueueFullFromISR
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu softvfp
 802              	xQueueIsQueueFullFromISR:
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 805              		@ link register save eliminated.
 806 052a 836B     		ldr	r3, [r0, #56]
 807 052c C06B     		ldr	r0, [r0, #60]
 808 052e 9842     		cmp	r0, r3
 809 0530 14BF     		ite	ne
 810 0532 0020     		movne	r0, #0
 811 0534 0120     		moveq	r0, #1
 812 0536 7047     		bx	lr
 814              		.align	1
 815              		.global	vQueueAddToRegistry
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu softvfp
 821              	vQueueAddToRegistry:
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824              		@ link register save eliminated.
 825 0538 10B4     		push	{r4}
 826 053a 0A4B     		ldr	r3, .L134
 827 053c 1B68     		ldr	r3, [r3]
 828 053e 4BB1     		cbz	r3, .L131
 829 0540 0123     		movs	r3, #1
 830 0542 084C     		ldr	r4, .L134
 831              	.L130:
 832 0544 54F83320 		ldr	r2, [r4, r3, lsl #3]
 833 0548 2AB1     		cbz	r2, .L127
 834 054a 0133     		adds	r3, r3, #1
 835 054c 0A2B     		cmp	r3, #10
 836 054e F9D1     		bne	.L130
 837              	.L126:
 838 0550 10BC     		pop	{r4}
 839 0552 7047     		bx	lr
 840              	.L131:
 841 0554 0023     		movs	r3, #0
 842              	.L127:
 843 0556 034A     		ldr	r2, .L134
 844 0558 42F83310 		str	r1, [r2, r3, lsl #3]
 845 055c 02EBC303 		add	r3, r2, r3, lsl #3
 846 0560 5860     		str	r0, [r3, #4]
 847 0562 F5E7     		b	.L126
 848              	.L135:
 849              		.align	2
 850              	.L134:
 851 0564 00000000 		.word	xQueueRegistry
 853              		.align	1
 854              		.global	vQueueUnregisterQueue
 855              		.syntax unified
 856              		.thumb
 857              		.thumb_func
 858              		.fpu softvfp
 860              	vQueueUnregisterQueue:
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              		@ link register save eliminated.
 864 0568 094B     		ldr	r3, .L143
 865 056a 5B68     		ldr	r3, [r3, #4]
 866 056c 9842     		cmp	r0, r3
 867 056e 09D0     		beq	.L141
 868 0570 074A     		ldr	r2, .L143
 869 0572 0123     		movs	r3, #1
 870              	.L140:
 871 0574 D168     		ldr	r1, [r2, #12]
 872 0576 8142     		cmp	r1, r0
 873 0578 05D0     		beq	.L137
 874 057a 0133     		adds	r3, r3, #1
 875 057c 0832     		adds	r2, r2, #8
 876 057e 0A2B     		cmp	r3, #10
 877 0580 F8D1     		bne	.L140
 878 0582 7047     		bx	lr
 879              	.L141:
 880 0584 0023     		movs	r3, #0
 881              	.L137:
 882 0586 024A     		ldr	r2, .L143
 883 0588 0021     		movs	r1, #0
 884 058a 42F83310 		str	r1, [r2, r3, lsl #3]
 885 058e 7047     		bx	lr
 886              	.L144:
 887              		.align	2
 888              	.L143:
 889 0590 00000000 		.word	xQueueRegistry
 891              		.align	1
 892              		.global	vQueueDelete
 893              		.syntax unified
 894              		.thumb
 895              		.thumb_func
 896              		.fpu softvfp
 898              	vQueueDelete:
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901 0594 10B5     		push	{r4, lr}
 902 0596 0446     		mov	r4, r0
 903 0598 FFF7FEFF 		bl	vQueueUnregisterQueue
 904 059c 2046     		mov	r0, r4
 905 059e FFF7FEFF 		bl	vPortFree
 906 05a2 10BD     		pop	{r4, pc}
 908              		.comm	xQueueRegistry,80,4
 909              		.ident	"GCC: (GNU Tools for Arm Embedded Processors 7-2018-q3-update) 7.3.1 20180622 (release) [AR
DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/ccHWHt7K.s:13     .text:0000000000000000 $t
     /tmp/ccHWHt7K.s:19     .text:0000000000000000 prvCopyDataToQueue
     /tmp/ccHWHt7K.s:78     .text:000000000000005e prvCopyDataFromQueue
     /tmp/ccHWHt7K.s:106    .text:0000000000000082 prvUnlockQueue
     /tmp/ccHWHt7K.s:178    .text:0000000000000104 xQueueGenericReset
     /tmp/ccHWHt7K.s:228    .text:0000000000000162 xQueueGenericCreate
     /tmp/ccHWHt7K.s:272    .text:00000000000001a4 xQueueCreateCountingSemaphore
     /tmp/ccHWHt7K.s:294    .text:00000000000001ba xQueueGenericSend
     /tmp/ccHWHt7K.s:405    .text:00000000000002a4 xQueueGenericSendFromISR
     /tmp/ccHWHt7K.s:468    .text:0000000000000314 xQueueGiveFromISR
     /tmp/ccHWHt7K.s:525    .text:000000000000036e xQueueGenericReceive
     /tmp/ccHWHt7K.s:643    .text:0000000000000468 xQueueReceiveFromISR
     /tmp/ccHWHt7K.s:702    .text:00000000000004c8 xQueuePeekFromISR
     /tmp/ccHWHt7K.s:734    .text:00000000000004f4 uxQueueMessagesWaiting
     /tmp/ccHWHt7K.s:752    .text:0000000000000506 uxQueueSpacesAvailable
     /tmp/ccHWHt7K.s:772    .text:000000000000051c uxQueueMessagesWaitingFromISR
     /tmp/ccHWHt7K.s:786    .text:0000000000000520 xQueueIsQueueEmptyFromISR
     /tmp/ccHWHt7K.s:802    .text:000000000000052a xQueueIsQueueFullFromISR
     /tmp/ccHWHt7K.s:821    .text:0000000000000538 vQueueAddToRegistry
     /tmp/ccHWHt7K.s:851    .text:0000000000000564 $d
                            *COM*:0000000000000050 xQueueRegistry
     /tmp/ccHWHt7K.s:853    .text:0000000000000568 $t
     /tmp/ccHWHt7K.s:860    .text:0000000000000568 vQueueUnregisterQueue
     /tmp/ccHWHt7K.s:889    .text:0000000000000590 $d
     /tmp/ccHWHt7K.s:891    .text:0000000000000594 $t
     /tmp/ccHWHt7K.s:898    .text:0000000000000594 vQueueDelete

UNDEFINED SYMBOLS
memcpy
vPortEnterCritical
vTaskMissedYield
xTaskRemoveFromEventList
vPortExitCritical
vPortYield
vListInitialise
pvPortMalloc
vTaskSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
ulPortSetInterruptMask
vPortClearInterruptMask
vPortFree
